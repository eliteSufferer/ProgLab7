package server.utils;

import common.functional.Printer;
import server.RunServer;

import java.sql.*;

public class DatabaseHandler {
    private static final String WORKER_TABLE = "worker";
    public static final String USER_TABLE = "my_user";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String LOCATION_TABLE = "location";
    public static final String PERSON_TABLE = "person";

    //Worker columns

    public static final String WORKER_TABLE_ID_COLUMN = "id";
    public static final String WORKER_TABLE_NAME_COLUMN = "name";
    public static final String WORKER_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String WORKER_TABLE_SALARY_COLUMN = "salary";
    public static final String WORKER_TABLE_POSITION_COLUMN = "position";
    public static final String WORKER_TABLE_STATUS_COLUMN = "status";
    public static final String WORKER_TABLE_PERSON_ID_COLUMN = "person_id";
    public static final String WORKER_TABLE_USER_ID_COLUMN = "user_id";

    //User columns

    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";

    //Coordinates columns

    public static final String COORDINATES_TABLE_WORKER_ID_COLUMN = "worker_id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";


    //Location columns

    public static final String LOCATION_TABLE_ID_COLUMN = "id";
    public static final String LOCATION_TABLE_X_COLUMN = "x";
    public static final String LOCATION_TABLE_Y_COLUMN = "y";
    public static final String LOCATION_TABLE_Z_COLUMN = "z";
    public static final String LOCATION_TABLE_NAME_COLUMN = "name";

    //Person columns
    public static final String PERSON_TABLE_ID_COLUMN = "id";
    public static final String PERSON_TABLE_BIRTHDAY_COLUMN = "birthday";
    public static final String PERSON_TABLE_height_COLUMN = "height";
    public static final String PERSON_TABLE_PASSPORT_COLUMN = "passport";
    public static final String PERSON_TABLE_LOCATION_ID_COLUMN = "location_id";

    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password){
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            RunServer.getLogger().info("Соединение с базой данных установлено.");
        } catch (SQLException e) {
            RunServer.getLogger().error("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException e) {
            RunServer.getLogger().error("Драйвер управления не найден!");
        }
    }

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            if (connection == null) RunServer.getLogger().error("Соединение с базой данных не установлено!");
            throw new SQLException(exception);
        }
    }

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
        } catch (SQLException e) {
            RunServer.getLogger().error("Ошибка при закрытии SQL запроса!");
        }
    }

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            RunServer.getLogger().info("Соединение с базой данных завершено.");
        } catch (SQLException exception) {
            RunServer.getLogger().error("Произошла ошибка при завершении соединения с базой данных!");
        }
    }

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            RunServer.getLogger().error("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }


    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            RunServer.getLogger().error("Произошла ошибка при установлении нормального режима базы данных!");
        }
    }


    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            RunServer.getLogger().error("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }


    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            RunServer.getLogger().error("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }


    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            RunServer.getLogger().error("Произошла ошибка при сохранении состояния базы данных!");
        }
    }

}
